
Switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000041c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000041c  000004b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  000004b2  2**0
                  ALLOC
  3 .stab         000007e0  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000833  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 36       	cpi	r26, 0x63	; 99
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 dd 01 	call	0x3ba	; 0x3ba <main>
  8a:	0c 94 0c 02 	jmp	0x418	; 0x418 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidInit>:
#define PORTA_DIR CONCBIT(DIO_PIN33_DIR, DIO_PIN34_DIR, DIO_PIN35_DIR, DIO_PIN36_DIR, DIO_PIN37_DIR, DIO_PIN38_DIR, DIO_PIN39_DIR, DIO_PIN40_DIR)
#define PORTB_DIR CONCBIT(DIO_PIN8_DIR, DIO_PIN7_DIR, DIO_PIN6_DIR, DIO_PIN5_DIR, DIO_PIN4_DIR, DIO_PIN3_DIR, DIO_PIN2_DIR, DIO_PIN1_DIR)
#define PORTC_DIR CONCBIT(DIO_PIN29_DIR, DIO_PIN28_DIR, DIO_PIN27_DIR, DIO_PIN26_DIR, DIO_PIN25_DIR, DIO_PIN24_DIR, DIO_PIN23_DIR, DIO_PIN22_DIR)
#define PORTD_DIR CONCBIT(DIO_PIN21_DIR, DIO_PIN20_DIR, DIO_PIN19_DIR, DIO_PIN18_DIR, DIO_PIN17_DIR, DIO_PIN16_DIR, DIO_PIN15_DIR, DIO_PIN14_DIR)
void DIO_voidInit(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
  9a:	ea e3       	ldi	r30, 0x3A	; 58
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
  a2:	e7 e3       	ldi	r30, 0x37	; 55
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 ef       	ldi	r24, 0xF0	; 240
  a8:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
  aa:	e4 e3       	ldi	r30, 0x34	; 52
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
  b2:	e1 e3       	ldi	r30, 0x31	; 49
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	80 83       	st	Z, r24
}
  ba:	cf 91       	pop	r28
  bc:	df 91       	pop	r29
  be:	08 95       	ret

000000c0 <DIO_voidSetPIN>:

void DIO_voidSetPIN (u8 local_pinNumber, u8 local_pinValue)
{
  c0:	df 93       	push	r29
  c2:	cf 93       	push	r28
  c4:	00 d0       	rcall	.+0      	; 0xc6 <DIO_voidSetPIN+0x6>
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	89 83       	std	Y+1, r24	; 0x01
  cc:	6a 83       	std	Y+2, r22	; 0x02

	if ((local_pinNumber < 41)&&(local_pinNumber >32))
  ce:	89 81       	ldd	r24, Y+1	; 0x01
  d0:	89 32       	cpi	r24, 0x29	; 41
  d2:	d8 f5       	brcc	.+118    	; 0x14a <DIO_voidSetPIN+0x8a>
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	81 32       	cpi	r24, 0x21	; 33
  d8:	c0 f1       	brcs	.+112    	; 0x14a <DIO_voidSetPIN+0x8a>
	{
		if (local_pinValue == DIO_HIGH)
  da:	8a 81       	ldd	r24, Y+2	; 0x02
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	d1 f4       	brne	.+52     	; 0x114 <DIO_voidSetPIN+0x54>
			SET_BIT (PORTA, (-(local_pinNumber-40)));
  e0:	ab e3       	ldi	r26, 0x3B	; 59
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	eb e3       	ldi	r30, 0x3B	; 59
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	48 2f       	mov	r20, r24
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	28 2f       	mov	r18, r24
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	88 e2       	ldi	r24, 0x28	; 40
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	bc 01       	movw	r22, r24
  f8:	62 1b       	sub	r22, r18
  fa:	73 0b       	sbc	r23, r19
  fc:	9b 01       	movw	r18, r22
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 2e       	mov	r0, r18
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_voidSetPIN+0x4a>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_voidSetPIN+0x46>
 10e:	84 2b       	or	r24, r20
 110:	8c 93       	st	X, r24
 112:	bf c0       	rjmp	.+382    	; 0x292 <DIO_voidSetPIN+0x1d2>
		else
			CLR_BIT (PORTA, (-(local_pinNumber-40)));
 114:	ab e3       	ldi	r26, 0x3B	; 59
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	eb e3       	ldi	r30, 0x3B	; 59
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	48 2f       	mov	r20, r24
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	28 2f       	mov	r18, r24
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	88 e2       	ldi	r24, 0x28	; 40
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	bc 01       	movw	r22, r24
 12c:	62 1b       	sub	r22, r18
 12e:	73 0b       	sbc	r23, r19
 130:	9b 01       	movw	r18, r22
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 2e       	mov	r0, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_voidSetPIN+0x7e>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	0a 94       	dec	r0
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_voidSetPIN+0x7a>
 142:	80 95       	com	r24
 144:	84 23       	and	r24, r20
 146:	8c 93       	st	X, r24
 148:	a4 c0       	rjmp	.+328    	; 0x292 <DIO_voidSetPIN+0x1d2>
	}
	else if (local_pinNumber < 9)
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	89 30       	cpi	r24, 0x09	; 9
 14e:	90 f5       	brcc	.+100    	; 0x1b4 <DIO_voidSetPIN+0xf4>
	{
		if (local_pinValue == DIO_HIGH)
 150:	8a 81       	ldd	r24, Y+2	; 0x02
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	b9 f4       	brne	.+46     	; 0x184 <DIO_voidSetPIN+0xc4>
			SET_BIT (PORTB, (local_pinNumber-1));
 156:	a8 e3       	ldi	r26, 0x38	; 56
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	e8 e3       	ldi	r30, 0x38	; 56
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	48 2f       	mov	r20, r24
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	88 2f       	mov	r24, r24
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	9c 01       	movw	r18, r24
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	30 40       	sbci	r19, 0x00	; 0
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 2e       	mov	r0, r18
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_voidSetPIN+0xba>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	0a 94       	dec	r0
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_voidSetPIN+0xb6>
 17e:	84 2b       	or	r24, r20
 180:	8c 93       	st	X, r24
 182:	87 c0       	rjmp	.+270    	; 0x292 <DIO_voidSetPIN+0x1d2>
		else
			CLR_BIT (PORTB, (local_pinNumber-1));
 184:	a8 e3       	ldi	r26, 0x38	; 56
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	e8 e3       	ldi	r30, 0x38	; 56
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	48 2f       	mov	r20, r24
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	88 2f       	mov	r24, r24
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	9c 01       	movw	r18, r24
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	30 40       	sbci	r19, 0x00	; 0
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 2e       	mov	r0, r18
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_voidSetPIN+0xe8>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	0a 94       	dec	r0
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_voidSetPIN+0xe4>
 1ac:	80 95       	com	r24
 1ae:	84 23       	and	r24, r20
 1b0:	8c 93       	st	X, r24
 1b2:	6f c0       	rjmp	.+222    	; 0x292 <DIO_voidSetPIN+0x1d2>
	}
	else if ((local_pinNumber < 30)&&(local_pinNumber > 21))
 1b4:	89 81       	ldd	r24, Y+1	; 0x01
 1b6:	8e 31       	cpi	r24, 0x1E	; 30
 1b8:	a8 f5       	brcc	.+106    	; 0x224 <DIO_voidSetPIN+0x164>
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	86 31       	cpi	r24, 0x16	; 22
 1be:	90 f1       	brcs	.+100    	; 0x224 <DIO_voidSetPIN+0x164>
	{
		if (local_pinValue == DIO_HIGH)
 1c0:	8a 81       	ldd	r24, Y+2	; 0x02
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	b9 f4       	brne	.+46     	; 0x1f4 <DIO_voidSetPIN+0x134>
			SET_BIT (PORTC, (local_pinNumber-22));
 1c6:	a5 e3       	ldi	r26, 0x35	; 53
 1c8:	b0 e0       	ldi	r27, 0x00	; 0
 1ca:	e5 e3       	ldi	r30, 0x35	; 53
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	48 2f       	mov	r20, r24
 1d2:	89 81       	ldd	r24, Y+1	; 0x01
 1d4:	88 2f       	mov	r24, r24
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	9c 01       	movw	r18, r24
 1da:	26 51       	subi	r18, 0x16	; 22
 1dc:	30 40       	sbci	r19, 0x00	; 0
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 2e       	mov	r0, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_voidSetPIN+0x12a>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	0a 94       	dec	r0
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_voidSetPIN+0x126>
 1ee:	84 2b       	or	r24, r20
 1f0:	8c 93       	st	X, r24
 1f2:	4f c0       	rjmp	.+158    	; 0x292 <DIO_voidSetPIN+0x1d2>
		else
			CLR_BIT (PORTC, (local_pinNumber-22));
 1f4:	a5 e3       	ldi	r26, 0x35	; 53
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	e5 e3       	ldi	r30, 0x35	; 53
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	48 2f       	mov	r20, r24
 200:	89 81       	ldd	r24, Y+1	; 0x01
 202:	88 2f       	mov	r24, r24
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	9c 01       	movw	r18, r24
 208:	26 51       	subi	r18, 0x16	; 22
 20a:	30 40       	sbci	r19, 0x00	; 0
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 2e       	mov	r0, r18
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_voidSetPIN+0x158>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	0a 94       	dec	r0
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_voidSetPIN+0x154>
 21c:	80 95       	com	r24
 21e:	84 23       	and	r24, r20
 220:	8c 93       	st	X, r24
 222:	37 c0       	rjmp	.+110    	; 0x292 <DIO_voidSetPIN+0x1d2>
	}
	else if ((local_pinNumber < 22)&&(local_pinNumber > 13))
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	86 31       	cpi	r24, 0x16	; 22
 228:	a0 f5       	brcc	.+104    	; 0x292 <DIO_voidSetPIN+0x1d2>
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	8e 30       	cpi	r24, 0x0E	; 14
 22e:	88 f1       	brcs	.+98     	; 0x292 <DIO_voidSetPIN+0x1d2>
	{
		if (local_pinValue == DIO_HIGH)
 230:	8a 81       	ldd	r24, Y+2	; 0x02
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	b9 f4       	brne	.+46     	; 0x264 <DIO_voidSetPIN+0x1a4>
			SET_BIT (PORTD, (local_pinNumber-14));
 236:	a2 e3       	ldi	r26, 0x32	; 50
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	e2 e3       	ldi	r30, 0x32	; 50
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	48 2f       	mov	r20, r24
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	88 2f       	mov	r24, r24
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	9c 01       	movw	r18, r24
 24a:	2e 50       	subi	r18, 0x0E	; 14
 24c:	30 40       	sbci	r19, 0x00	; 0
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 2e       	mov	r0, r18
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_voidSetPIN+0x19a>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	0a 94       	dec	r0
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_voidSetPIN+0x196>
 25e:	84 2b       	or	r24, r20
 260:	8c 93       	st	X, r24
 262:	17 c0       	rjmp	.+46     	; 0x292 <DIO_voidSetPIN+0x1d2>
		else
			CLR_BIT (PORTD, (local_pinNumber-14));
 264:	a2 e3       	ldi	r26, 0x32	; 50
 266:	b0 e0       	ldi	r27, 0x00	; 0
 268:	e2 e3       	ldi	r30, 0x32	; 50
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	48 2f       	mov	r20, r24
 270:	89 81       	ldd	r24, Y+1	; 0x01
 272:	88 2f       	mov	r24, r24
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	9c 01       	movw	r18, r24
 278:	2e 50       	subi	r18, 0x0E	; 14
 27a:	30 40       	sbci	r19, 0x00	; 0
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 2e       	mov	r0, r18
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_voidSetPIN+0x1c8>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	0a 94       	dec	r0
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_voidSetPIN+0x1c4>
 28c:	80 95       	com	r24
 28e:	84 23       	and	r24, r20
 290:	8c 93       	st	X, r24
	}
}
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	cf 91       	pop	r28
 298:	df 91       	pop	r29
 29a:	08 95       	ret

0000029c <DIO_u8GetPin>:

u8 DIO_u8GetPin(u8 local_pinNumber)
{
 29c:	df 93       	push	r29
 29e:	cf 93       	push	r28
 2a0:	0f 92       	push	r0
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
 2a6:	89 83       	std	Y+1, r24	; 0x01
	if ((local_pinNumber < 41)&&(local_pinNumber >32))
 2a8:	89 81       	ldd	r24, Y+1	; 0x01
 2aa:	89 32       	cpi	r24, 0x29	; 41
 2ac:	08 f5       	brcc	.+66     	; 0x2f0 <DIO_u8GetPin+0x54>
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	81 32       	cpi	r24, 0x21	; 33
 2b2:	f0 f0       	brcs	.+60     	; 0x2f0 <DIO_u8GetPin+0x54>
	{
		if ((GET_BIT(PINA, (-(local_pinNumber-40))))==1)
 2b4:	e9 e3       	ldi	r30, 0x39	; 57
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	48 2f       	mov	r20, r24
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	89 81       	ldd	r24, Y+1	; 0x01
 2c0:	28 2f       	mov	r18, r24
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	88 e2       	ldi	r24, 0x28	; 40
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	82 1b       	sub	r24, r18
 2ca:	93 0b       	sbc	r25, r19
 2cc:	9a 01       	movw	r18, r20
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_u8GetPin+0x38>
 2d0:	35 95       	asr	r19
 2d2:	27 95       	ror	r18
 2d4:	8a 95       	dec	r24
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_u8GetPin+0x34>
 2d8:	c9 01       	movw	r24, r18
 2da:	81 70       	andi	r24, 0x01	; 1
 2dc:	90 70       	andi	r25, 0x00	; 0
 2de:	88 23       	and	r24, r24
 2e0:	21 f0       	breq	.+8      	; 0x2ea <DIO_u8GetPin+0x4e>
			ret=DIO_HIGH;
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	80 93 60 00 	sts	0x0060, r24
 2e8:	62 c0       	rjmp	.+196    	; 0x3ae <DIO_u8GetPin+0x112>
		else
			ret=DIO_LOW;
 2ea:	10 92 60 00 	sts	0x0060, r1
 2ee:	5f c0       	rjmp	.+190    	; 0x3ae <DIO_u8GetPin+0x112>
	}

	else if (local_pinNumber < 9)
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	89 30       	cpi	r24, 0x09	; 9
 2f4:	d8 f4       	brcc	.+54     	; 0x32c <DIO_u8GetPin+0x90>
	{
			if ((GET_BIT(PINB, (local_pinNumber-1)))==1)
 2f6:	e6 e3       	ldi	r30, 0x36	; 54
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	28 2f       	mov	r18, r24
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	89 81       	ldd	r24, Y+1	; 0x01
 302:	88 2f       	mov	r24, r24
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	a9 01       	movw	r20, r18
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_u8GetPin+0x74>
 30c:	55 95       	asr	r21
 30e:	47 95       	ror	r20
 310:	8a 95       	dec	r24
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_u8GetPin+0x70>
 314:	ca 01       	movw	r24, r20
 316:	81 70       	andi	r24, 0x01	; 1
 318:	90 70       	andi	r25, 0x00	; 0
 31a:	88 23       	and	r24, r24
 31c:	21 f0       	breq	.+8      	; 0x326 <DIO_u8GetPin+0x8a>
				ret=DIO_HIGH;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 60 00 	sts	0x0060, r24
 324:	44 c0       	rjmp	.+136    	; 0x3ae <DIO_u8GetPin+0x112>
			else
				ret=DIO_LOW;
 326:	10 92 60 00 	sts	0x0060, r1
 32a:	41 c0       	rjmp	.+130    	; 0x3ae <DIO_u8GetPin+0x112>
	}
	else if ((local_pinNumber < 30)&&(local_pinNumber > 21))
 32c:	89 81       	ldd	r24, Y+1	; 0x01
 32e:	8e 31       	cpi	r24, 0x1E	; 30
 330:	f0 f4       	brcc	.+60     	; 0x36e <DIO_u8GetPin+0xd2>
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	86 31       	cpi	r24, 0x16	; 22
 336:	d8 f0       	brcs	.+54     	; 0x36e <DIO_u8GetPin+0xd2>
	{
			if ((GET_BIT(PINC, (local_pinNumber-22)))==1)
 338:	e3 e3       	ldi	r30, 0x33	; 51
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	28 2f       	mov	r18, r24
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	88 2f       	mov	r24, r24
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	46 97       	sbiw	r24, 0x16	; 22
 34a:	a9 01       	movw	r20, r18
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_u8GetPin+0xb6>
 34e:	55 95       	asr	r21
 350:	47 95       	ror	r20
 352:	8a 95       	dec	r24
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_u8GetPin+0xb2>
 356:	ca 01       	movw	r24, r20
 358:	81 70       	andi	r24, 0x01	; 1
 35a:	90 70       	andi	r25, 0x00	; 0
 35c:	88 23       	and	r24, r24
 35e:	21 f0       	breq	.+8      	; 0x368 <DIO_u8GetPin+0xcc>
				ret=DIO_HIGH;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 93 60 00 	sts	0x0060, r24
 366:	23 c0       	rjmp	.+70     	; 0x3ae <DIO_u8GetPin+0x112>
			else
				ret=DIO_LOW;
 368:	10 92 60 00 	sts	0x0060, r1
 36c:	20 c0       	rjmp	.+64     	; 0x3ae <DIO_u8GetPin+0x112>
	}
	else if ((local_pinNumber < 22)&&(local_pinNumber > 13))
 36e:	89 81       	ldd	r24, Y+1	; 0x01
 370:	86 31       	cpi	r24, 0x16	; 22
 372:	e8 f4       	brcc	.+58     	; 0x3ae <DIO_u8GetPin+0x112>
 374:	89 81       	ldd	r24, Y+1	; 0x01
 376:	8e 30       	cpi	r24, 0x0E	; 14
 378:	d0 f0       	brcs	.+52     	; 0x3ae <DIO_u8GetPin+0x112>
	{
			if ((GET_BIT(PIND, (local_pinNumber-14)))==1)
 37a:	e0 e3       	ldi	r30, 0x30	; 48
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	28 2f       	mov	r18, r24
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	88 2f       	mov	r24, r24
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 97       	sbiw	r24, 0x0e	; 14
 38c:	a9 01       	movw	r20, r18
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_u8GetPin+0xf8>
 390:	55 95       	asr	r21
 392:	47 95       	ror	r20
 394:	8a 95       	dec	r24
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_u8GetPin+0xf4>
 398:	ca 01       	movw	r24, r20
 39a:	81 70       	andi	r24, 0x01	; 1
 39c:	90 70       	andi	r25, 0x00	; 0
 39e:	88 23       	and	r24, r24
 3a0:	21 f0       	breq	.+8      	; 0x3aa <DIO_u8GetPin+0x10e>
				ret=DIO_HIGH;
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	80 93 60 00 	sts	0x0060, r24
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_u8GetPin+0x112>
			else
				ret=DIO_LOW;
 3aa:	10 92 60 00 	sts	0x0060, r1
	}
	return ret;
 3ae:	80 91 60 00 	lds	r24, 0x0060
}
 3b2:	0f 90       	pop	r0
 3b4:	cf 91       	pop	r28
 3b6:	df 91       	pop	r29
 3b8:	08 95       	ret

000003ba <main>:
void main(){}
 3ba:	df 93       	push	r29
 3bc:	cf 93       	push	r28
 3be:	cd b7       	in	r28, 0x3d	; 61
 3c0:	de b7       	in	r29, 0x3e	; 62
 3c2:	cf 91       	pop	r28
 3c4:	df 91       	pop	r29
 3c6:	08 95       	ret

000003c8 <Switch_u8Pressed>:
	#include "Switch_int.h"
u8 switch_ret=0;
	void Switch_VoidInit();

	u8 Switch_u8Pressed(u8 local_switch)
	{
 3c8:	df 93       	push	r29
 3ca:	cf 93       	push	r28
 3cc:	0f 92       	push	r0
 3ce:	cd b7       	in	r28, 0x3d	; 61
 3d0:	de b7       	in	r29, 0x3e	; 62
 3d2:	89 83       	std	Y+1, r24	; 0x01
		if(local_switch==Switch1)
 3d4:	89 81       	ldd	r24, Y+1	; 0x01
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	59 f4       	brne	.+22     	; 0x3f0 <Switch_u8Pressed+0x28>
		{
			#if (Switch1_type==PullDown)
				if(DIO_u8GetPin(DIO_PIN1)==DIO_HIGH)
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 4e 01 	call	0x29c	; 0x29c <DIO_u8GetPin>
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	21 f4       	brne	.+8      	; 0x3ec <Switch_u8Pressed+0x24>
					{
						switch_ret=Pushed;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	80 93 62 00 	sts	0x0062, r24
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <Switch_u8Pressed+0x28>
					}
				else
				{
					switch_ret=Released;
 3ec:	10 92 62 00 	sts	0x0062, r1
			{
				switch_ret=Released;
			}
			#endif
		}
		if(local_switch==Switch2)
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	82 30       	cpi	r24, 0x02	; 2
 3f4:	59 f4       	brne	.+22     	; 0x40c <Switch_u8Pressed+0x44>
		{
			#if (Switch1_type==PullDown)
				if(DIO_u8GetPin(DIO_PIN2)==DIO_HIGH)
 3f6:	82 e0       	ldi	r24, 0x02	; 2
 3f8:	0e 94 4e 01 	call	0x29c	; 0x29c <DIO_u8GetPin>
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	21 f4       	brne	.+8      	; 0x408 <Switch_u8Pressed+0x40>
					{
						switch_ret=Pushed;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	80 93 62 00 	sts	0x0062, r24
 406:	02 c0       	rjmp	.+4      	; 0x40c <Switch_u8Pressed+0x44>
					}
				else
				{
					switch_ret=Released;
 408:	10 92 62 00 	sts	0x0062, r1
				{
					switch_ret=Released;
				}
			#endif
		}
	return switch_ret;
 40c:	80 91 62 00 	lds	r24, 0x0062
	}
 410:	0f 90       	pop	r0
 412:	cf 91       	pop	r28
 414:	df 91       	pop	r29
 416:	08 95       	ret

00000418 <_exit>:
 418:	f8 94       	cli

0000041a <__stop_program>:
 41a:	ff cf       	rjmp	.-2      	; 0x41a <__stop_program>
